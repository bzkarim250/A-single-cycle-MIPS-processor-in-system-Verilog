
module FullAdder_TB;

   // Inputs
   reg A, B, Cin;
   
   // Outputs
   wire Sum, Cout;

   // Instantiate Full Adder
   FullAdder uut (
      .A(A),
      .B(B),
      .Cin(Cin),
      .Sum(Sum),
      .Cout(Cout)
   );

   // Clock generation
   reg clk = 0;
   always #5 clk = ~clk;

   // Test stimulus
   initial begin
      $monitor("Time=%0t A=%b B=%b Cin=%b Sum=%b Cout=%b", $time, A, B, Cin, Sum, Cout);

      // Test Case 1: A=0, B=0, Cin=0
      A = 0; B = 0; Cin = 0;
      #10;

      // Test Case 2: A=1, B=0, Cin=0
      A = 1; B = 0; Cin = 0;
      #10;

      // Test Case 3: A=0, B=1, Cin=0
      A = 0; B = 1; Cin = 0;
      #10;

      // Test Case 4: A=1, B=1, Cin=0
      A = 1; B = 1; Cin = 0;
      #10;

      // Test Case 5: A=0, B=0, Cin=1
      A = 0; B = 0; Cin = 1;
      #10;

      // Test Case 6: A=1, B=0, Cin=1
      A = 1; B = 0; Cin = 1;
      #10;

      // Test Case 7: A=0, B=1, Cin=1
      A = 0; B = 1; Cin = 1;
      #10;

      // Test Case 8: A=1, B=1, Cin=1
      A = 1; B = 1; Cin = 1;
      #10;

      // End simulation
      $stop;
   end

endmodule
